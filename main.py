import telebot
import psycopg2
from text import get_offset, search_directspeech, filter_lower_words, keep_alpha, capitalize_words, search_qoutation, find_with_offset

con = psycopg2.connect(
    database="books",
    user="chatbot",
    password="mrvl",
    host="127.0.0.1"
)
cur = con.cursor()
cur1 = con.cursor()
cur.execute("SELECT * from books")
cur1.execute("SELECT * from authors")
rows = cur.fetchall()
rows1 = cur1.fetchall()
print(rows, rows1)

token = open('token.txt').read()
bot = telebot.TeleBot(token)

@bot.message_handler(commands=['start'])
def start_message(message):
    bot.send_message(message.chat.id, 'ÐÑÐ¸Ð²ÐµÑ, ÑÑ Ð½Ð°Ð¿Ð¸ÑÐ°Ð» Ð¼Ð½Ðµ /start \n ÐÐ¾Ñ ÐºÐ°ÐºÐ¸Ðµ ÐºÐ¾Ð¼Ð°Ð½Ð´Ñ Ñ Ð¼Ð¾Ð³Ñ Ð¸ÑÐ¿Ð¾Ð»Ð½ÑÑÑ: \n /quotation - Ð½Ð°Ð¹ÑÐ¸ Ð¸Ð¼Ñ Ð¿ÐµÑÑÐ¾Ð½Ð°Ð¶Ð° Ð¸ Ð³Ð»Ð°Ð²Ñ Ð² ÐºÐ½Ð¸Ð³Ðµ Ð¿Ð¾ Ð²Ð²ÐµÐ´ÐµÐ½Ð½Ð¾Ð¹ ÐÐ°Ð¼Ð¸ ÑÐ¸ÑÐ°ÑÐµ. \n /character - Ð²ÑÐ´ÐµÐ»Ð¸ÑÑ ÐºÐ°Ðº Ð¼Ð¾Ð¶Ð½Ð¾ Ð±Ð¾Ð»ÑÑÐµ ÑÐ¸ÑÐ°Ñ Ð¿ÐµÑÑÐ¾Ð½Ð°Ð¶Ð° Ð² Ð·Ð°Ð´Ð°Ð½Ð½Ð¾Ð¹ Ð³Ð»Ð°Ð²Ðµ.\n/searchbook - Ð²ÑÐ²Ð¾Ð¶Ñ ÑÐ¿Ð¸ÑÐ¾Ðº ÐºÐ½Ð¸Ð³ Ð² Ð¼Ð¾ÐµÐ¹ Ð±Ð°Ð·Ðµ Ð´Ð°Ð½Ð½ÑÑ, Ð¿ÑÐ¾ÑÐ¾Ð¶Ð´ÐµÐ½Ð¸Ðµ ÑÑÐ¾Ð¹ ÐºÐ¾Ð¼Ð°Ð½Ð´Ñ Ð½ÐµÐ¾Ð±ÑÐ¾Ð´Ð¸Ð¼Ð¾ Ð´Ð»Ñ Ð¸ÑÐ¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°Ð½Ð¸Ñ Ð¾ÑÑÐ°Ð»ÑÐ½ÑÑ ÐºÐ¾Ð¼Ð°Ð½Ð´.')

@bot.message_handler(commands=['quotation'])
def start_quotation(message):
    global state
    state = 'searchbook'
    bot.send_message(message.chat.id, 'ÐÐ¾Ñ ÐºÐ°ÐºÐ¸Ðµ Ð°Ð²ÑÐ¾ÑÑ Ñ Ð¼ÐµÐ½Ñ ÐµÑÑÑ:')
    bot.send_message(message.chat.id, 'ÐÑÑÑ Ð»Ð¸ ÑÑÐµÐ´Ð¸ Ð½Ð¸Ñ Ð½ÑÐ¶Ð½ÑÐ¹ ÐÐ°Ð¼ Ð°Ð²ÑÐ¾Ñ?(ÐÐ°/ÐÐµÑ)')
    for row in rows1:
        bot.send_message(message.chat.id, row[1] + ' ' + row[2] + ' ' + row[3])


@bot.message_handler(commands=['quotation'])
def start_quotation(message):
    global state
    state = 'quotation'
    bot.send_message(message.chat.id, 'ÐÐ°Ð¿Ð¸ÑÐ¸ÑÐµ ÐÐ°ÑÑ ÑÐ¸ÑÐ°ÑÑ.')
    for row in rows1:
        bot.send_message(message.chat.id, row[1] + ' ' + row[2] + ' ' + row[3])
@bot.message_handler(commands=['character'])
def start_character(message):
    global state
    state = 'character'
    bot.send_message(message.chat.id, 'ÐÐ°Ð¿Ð¸ÑÐ¸ÑÐµ Ð¿ÐµÑÑÐ¾Ð½Ð°Ð¶Ð°, Ð¸ Ð³Ð»Ð°Ð²Ñ, Ð¸ ,Ð²Ð¾Ð·Ð¼Ð¾Ð¶Ð½Ð¾, Ð½Ð°Ð·Ð²Ð°Ð½Ð¸Ðµ ÐºÐ½Ð¸Ð³Ð¸.')

@bot.message_handler(content_types=['document'])
def handle_text_doc(message):
    global file_name
    if state == 'searchbook':
        document_id = message.document.file_id
        file_id_info = bot.get_file(document_id)
        downloaded_file = bot.download_file(file_id_info.file_path)
        file_name = message.document.file_name
        with open('downloaded_books/' + file_name, 'wb') as new_file:
            new_file.write(downloaded_file)
        bot.send_message(message.chat.id, 'Ð¯ Ð·Ð°Ð³ÑÑÐ·Ð¸Ð» Ð²Ð°ÑÑ ÐºÐ½Ð¸Ð³Ñ, Ð¼Ð¾Ð¶ÐµÑÐµ Ð¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÑÑÑ Ð¾ÑÑÐ°Ð»ÑÐ½ÑÐ¼Ð¸ Ð¼Ð¾Ð¸Ð¼Ð¸ ÐºÐ¾Ð¼Ð°Ð½Ð´Ð°Ð¼Ð¸)')
    else:
        bot.send_message(message.chat.id, 'ÐÐ·Ð²Ð¸Ð½Ð¸ÑÐµ, Ð½Ð¾ ÐÑ Ð¿ÑÐ¸ÑÐ»Ð°Ð»Ð¸ ÑÑÐ¾ Ð½Ðµ Ð²Ð¾Ð²ÑÐµÐ¼Ñ.')

@bot.message_handler(content_types=['text'])
def send_text(message):
    file_name = 'example.txt'
    global state
    if message.text.lower() == 'Ð¿ÑÐ¸Ð²ÐµÑ':
        bot.send_message(message.chat.id, 'ÐÑÐ¸Ð²ÐµÑ! ÐÐ°Ð¿Ð¸ÑÐ¸ Ð¼Ð½Ðµ /start, ÑÑÐ¾Ð±Ñ ÑÐ·Ð½Ð°ÑÑ, ÑÑÐ¾ Ñ ÑÐ¼ÐµÑ.')
    elif message.text.lower() == 'Ð¿Ð¾ÐºÐ°':
        bot.send_message(message.chat.id, 'ÐÐ¾ÐºÐ°, ÑÐ¾ÑÐ¾ÑÐµÐ³Ð¾ Ð´Ð½Ñ!')
    elif state == 'searchbook':
        if message.text.lower() == "Ð´Ð°":
            bot.send_message(message.chat.id, 'ÐÐ°Ð¿Ð¸ÑÐ¸ÑÐµ ÐµÐ³Ð¾ ÐÐ¼Ñ/Ð¤Ð°Ð¼Ð¸Ð»Ð¸Ñ/ÐÑÑÐµÑÑÐ²Ð¾ ÑÐ°Ðº ÐºÐ°Ðº Ð¾Ð½Ð¾ Ð·Ð°Ð¿Ð¸ÑÐ°Ð½Ð¾ Ð² ÑÐ¾Ð¾Ð±ÑÐµÐ½Ð¸Ð¸ Ð²ÑÑÐµ.')
        elif message.text.lower() == "Ð½ÐµÑ":
            bot.send_message(message.chat.id, 'ÐÐ°Ð¿Ð¸ÑÐ¸ÑÐµ ÐµÐ³Ð¾ ÐÐ¼Ñ/Ð¤Ð°Ð¼Ð¸Ð»Ð¸Ñ/ÐÑÑÐµÑÑÐ²Ð¾ Ð¸ ÑÐ»ÐµÐ´ÑÑÑÑÐ¸Ð¼ ÑÐ¾Ð¾Ð±ÑÐµÐ½Ð¸ÐµÐ¼ Ð¿ÑÐ¸ÑÐ»Ð¸ÑÐµ ÑÐ°Ð¹Ð» Ñ Ð½ÑÐ¶Ð½Ð¾Ð¹ ÐÐ°Ð¼ ÐºÐ½Ð¸Ð³Ð¾Ð¹.')
            state = 'author'
    elif state == 'author':
        author = message.text.lower.split()
        cur.execute("INSERT INTO authors (name, surname, middlename) VALUES (%(author[0]), %(author[1]), %(author[2]))", author)
    elif state == 'quotation':
        if True:
            if message.text.lower() == "Ð´Ð°":
                bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAEBVkRfYOL4e95nsf0BQTNERFzXlRPXCQAC6AIAArVx2gZSDa62VYCCWxsE')
                bot.send_message(message.chat.id, 'Ð¯ ÑÐ°Ð´, ÑÑÐ¾ ÑÐ¼Ð¾Ð³ ÐÐ°Ð¼ Ð¿Ð¾Ð¼Ð¾ÑÑ. ÐÑÑÑ Ð»Ð¸ ÐµÑÐµ ÑÐ¸ÑÐ°ÑÑ Ð´Ð»Ñ Ð¼ÐµÐ½Ñ?')
            elif message.text.lower() == "Ð½ÐµÑ":
                bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAEBVktfYPUL4o_PjERkI5qn7OAbxX48mQACGgADWbv8JTxSipCGVVnTGwQ')
                bot.send_message(message.chat.id, 'ÐÐ¾Ð¿ÑÐ¾Ð±ÑÐ¹ÑÐµ Ð¸ÑÐ¿ÑÐ°Ð²Ð¸ÑÑ ÑÐ¸ÑÐ°ÑÑ Ð¸Ð»Ð¸ Ð¿ÑÐ¸ÑÐ»Ð°ÑÑ Ð¼Ð½Ðµ ÐºÐ½Ð¸Ð¶ÐºÑ')
            else:
                text = open("downloaded_books/" + file_name, encoding="utf-8").read()
                keep_alpha_line, offset_list = get_offset(text)
                lower_words = {word for word in keep_alpha_line.split() if word.islower()}
                quotation = message.text
                quotation_author = ''
                lines_with_quotation = search_qoutation(quotation, file_name)
                if len(lines_with_quotation) == 0:
                    lines_with_quotation, punct_quotations = find_with_offset(quotation, file_name)
                    if len(lines_with_quotation) == 0:
                        bot.send_message(message.chat.id, 'Ð¦Ð¸ÑÐ°ÑÐ° Ð½Ðµ Ð½Ð°Ð¹Ð´ÐµÐ½Ð°, Ð´Ð¾Ð¿Ð¾Ð»Ð½Ð¸ÑÐµ Ð¸Ð»Ð¸ Ð¸ÑÐ¿ÑÐ°Ð²Ð¸ÑÐµ ÑÐ¸ÑÐ°ÑÑ')
                    else:
                        bot.send_message(message.chat.id, 'ÐÐ¾Ñ Ð²Ð¾Ð·Ð¼Ð¾Ð¶Ð½ÑÐµ Ð°Ð±Ð·Ð°ÑÑ Ñ ÑÑÐ¾Ð¹ ÑÐ¸ÑÐ°ÑÐ¾Ð¹ Ð¸ ÐµÐµ Ð°Ð²ÑÐ¾ÑÑ:')
                        for k in range(len(lines_with_quotation)):
                            quotation = punct_quotations[k]
                            potential_authors = []
                            result_author, result_direct = search_directspeech(lines_with_quotation[k])
                            for i in range(len(result_direct)):
                                if result_direct[i].find(quotation) != -1:
                                    quotation_author = result_author[i]
                            capitalize_list = capitalize_words(keep_alpha(quotation_author))
                            potential_authors = filter_lower_words(capitalize_list, lower_words)
                            bot.send_message(message.chat.id, lines_with_quotation[k])
                            if len(potential_authors) != 0:
                                bot.send_message(message.chat.id, potential_authors[0])
                            else:
                                while len(potential_authors) == 0:
                                    previous_paragraph = list(open("downloaded_books/" + file_name, encoding="utf-8"))[k - 1]
                                    previous_capitalize_list = capitalize_words(keep_alpha(previous_paragraph))
                                    potential_authors = filter_lower_words(previous_capitalize_list, lower_words)
                                bot.send_message(message.chat.id, potential_authors[- 1])
                        bot.send_message(message.chat.id, 'ÐÐ°ÑÐ»Ð¸ Ð»Ð¸ ÐÑ Ð¾ÑÐ²ÐµÑ Ð½Ð° ÑÐ²Ð¾Ð¹ Ð²Ð¾Ð¿ÑÐ¾Ñ?(ÐÐ°/ÐÐµÑ)')
                else:
                    bot.send_message(message.chat.id, 'ÐÐ¾Ñ Ð²Ð¾Ð·Ð¼Ð¾Ð¶Ð½ÑÐµ Ð°Ð±Ð·Ð°ÑÑ Ñ ÑÑÐ¾Ð¹ ÑÐ¸ÑÐ°ÑÐ¾Ð¹ Ð¸ ÐµÐµ Ð°Ð²ÑÐ¾ÑÑ:')
                    for line in lines_with_quotation:
                        potential_authors = []
                        result_author, result_direct = search_directspeech(line)
                        for i in range(len(result_direct)):
                            if result_direct[i].find(quotation) != -1:
                                quotation_author = result_author[i]
                        capitalize_list = capitalize_words(keep_alpha(quotation_author))
                        potential_authors = filter_lower_words(capitalize_list, lower_words)
                        bot.send_message(message.chat.id, line)
                        if len(potential_authors) != 0:
                            bot.send_message(message.chat.id, potential_authors[0])
                        else:
                            while len(potential_authors) == 0:
                                previous_paragraph = list(open("downloaded_books/" + file_name, encoding="utf-8"))[
                                    list(open("downloaded_books/" + file_name, encoding="utf-8")).index(line) - 1]
                                previous_capitalize_list = capitalize_words(keep_alpha(previous_paragraph))
                                potential_authors = filter_lower_words(previous_capitalize_list, lower_words)
                            bot.send_message(message.chat.id, potential_authors[- 1])
                    bot.send_message(message.chat.id, 'ÐÐ°ÑÐ»Ð¸ Ð»Ð¸ ÐÑ Ð¾ÑÐ²ÐµÑ Ð½Ð° ÑÐ²Ð¾Ð¹ Ð²Ð¾Ð¿ÑÐ¾Ñ?(ÐÐ°/ÐÐµÑ)')
    elif state == 'character':
        text = open('example.txt', encoding="utf-8").read()
state = ''
file_name = ''
def test():
    file_name = 'example.txt'
    text = open("downloaded_books/" + file_name, encoding="utf-8").read()
    lower_words = {word for word in keep_alpha(text).split() if word.islower()}
    quotation = 'Ð Ð±ÑÐ´ÑÑÑÑ Ð¶Ð¸Ð·Ð½Ñ?'
    quotation_author = ''
    print(search_qoutation(quotation, file_name))
    lines_with_quotation = search_qoutation(quotation, file_name)
    for line in lines_with_quotation:
        potential_authors = []
        result_author, result_direct = search_directspeech(line)
        for sentence in range(len(result_direct)):
            if result_direct[sentence].find(quotation) != -1:
                quotation_author = result_author[sentence]
        capitalize_list = capitalize_words(keep_alpha(quotation_author))
        potential_authors = filter_lower_words(capitalize_list, lower_words)
        try:
            print(potential_authors)
        except:
            continue

if __name__ == '__main__':
    bot.polling()
    #print(get_offset('â ÐÑ,   ÑÐ¾ÑÐ¾ÑÐ¾'))))

